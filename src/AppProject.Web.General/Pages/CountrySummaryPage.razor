@page "/general/countries"

@inherits SearchPage<SearchRequest, CountrySummary>

<SearchControl OnExecuteSearch=@this.ExecuteSearchAsync>
    <DataGridContent>
        <DataGridControl TSummary="CountrySummary" Items=@this.Items @bind-SelectedItems=@this.SelectedItems>
            <GlobalActions>
                <RadzenButton Icon="arrow_downward" ButtonStyle="ButtonStyle.Base" Text="Import" />
            </GlobalActions>
            <ContextActions>
                <RadzenButton Icon="arrow_upward" ButtonStyle="ButtonStyle.Base" Variant="Variant.Outlined"
                    Text="Export" Disabled=@(!this.HasItemsSelected) />
            </ContextActions>
            <ChildContent>
                <RadzenDataGridColumn TItem="CountrySummary" Title="Country name"
                    Property=@nameof(CountrySummary.Name) />
            </ChildContent>
        </DataGridControl>
    </DataGridContent>
</SearchControl>

@code {
    protected override Task<IEnumerable<CountrySummary>> FetchDataAsync()
    {
        IEnumerable<CountrySummary> summaries = new List<CountrySummary>()
{
new CountrySummary { Id = Guid.NewGuid(), Name = "Brazil" },
new CountrySummary { Id = Guid.NewGuid(), Name = "USA" },
new CountrySummary { Id = Guid.NewGuid(), Name = "France" },
};

        return Task.FromResult(summaries);
    }
    /*
    protected override Task OnNewItemAsync() => Navigation.NavigateToAsync("general/country");

    protected override Task OnEditItemAsync()
    {
    if (this.SelectedItems.Count == 1)
    {
    var id = this.SelectedItems.First().Id;
    return Navigation.NavigateToAsync($"general/country/{id}");
    }

    return Task.CompletedTask;
    }

    protected override async Task OnDeleteItemAsync()
    {
    if (this.SelectedItems.Count > 0)
    {
    var confirmed = await DialogService.Confirm(
    StringResource.GetStringByKey("CountrySummaryPage_Delete_Confirmation_Message"),
    StringResource.GetStringByKey("CountrySummaryPage_Delete_Confirmation_Title"),
    new ConfirmOptions() { OkButtonText = StringResource.GetStringByKey("Yes"), CancelButtonText =
    StringResource.GetStringByKey("No") });

    if (confirmed == true)
    {
    var ids = this.SelectedItems.Select(i => i.Id).ToArray();
    await CountryClient.DeleteCountriesAsync(ids);
    await OnSearchAsync();
    this.SelectedItems.Clear();
    StateHasChanged();
    }
    }
    }*/
}