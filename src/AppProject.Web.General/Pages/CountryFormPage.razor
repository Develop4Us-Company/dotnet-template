@using AppProject.Web.ApiClient.General

@inherits FormPage<Country>

<FormControl TItem="Country" OnSave=@this.OnSaveAsync OnCancel=@this.OnCancelAsync>
    <FieldsetControl Title=@StringResource.GetStringByKey("General_CountryFormPage_GeneralFieldsetControl_Title")>
        <RadzenRow>
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.Subtitle2">@StringResource.GetStringByKey("General_CountryFormPage_GeneralFieldset_IdField_Text", this.Entity.Id)</RadzenText>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" Wrap="FlexWrap.Wrap">
                    <RadzenFormField Text=@StringResource.GetStringByKey("General_CountryFormPage_GeneralFieldset_NameField_Label")>
                        <RadzenTextBox Name="NameField" @bind-Value=@this.Entity.Name />
                        <RadzenRequiredValidator Component="NameField" Text=@StringResource.GetStringByKey("General_CountryFormPage_GeneralFieldset_NameField_Required")/>
                    </RadzenFormField>
                    <RadzenFormField Text=@StringResource.GetStringByKey("General_CountryFormPage_GeneralFieldset_CodeField_Label")>
                        <RadzenTextBox @bind-Value=@this.Entity.Code />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </FieldsetControl>
</FormControl>

@code {
    [Inject]
    private ICountryClient CountryClient { get; set; } = default!;

    [Parameter]
    public Guid? Id { get; set; }

    private Task OnCancelAsync() => this.CloseDialogAsync();

    private async Task OnSaveAsync()
    {
        var keyResponse = await this.GetResultOrHandleExceptionAsync<KeyResponse<Guid>>(
            async () => 
            {
                if (this.Entity.Id != Guid.NewGuid())
                {
                    return await this.CountryClient.PutAsync(new CreateOrUpdateRequest<Country> { Entity = this.Entity });
                }
                
                return await this.CountryClient.PostAsync(new CreateOrUpdateRequest<Country> { Entity = this.Entity });
            }
        );

        if (keyResponse is not null)
        {
            this.Entity.Id = keyResponse.Id;
            await this.CloseDialogAsync(this.Entity);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (this.Id.HasValue)
        {
            var entityResponse = await this.GetResultOrHandleExceptionAsync<EntityResponse<Country>>(
                () => this.CountryClient.GetAsync(new GetByIdRequest<Guid>{ Id = this.Id.Value })
            );

            if (entityResponse is not null)
            {
                this.SetEntity(entityResponse.Entity);
            }
        }
    }
}
