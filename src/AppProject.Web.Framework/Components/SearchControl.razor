@using AppProject.Models
@using System.Collections.ObjectModel

@inherits AppProjectComponentBase

<RadzenCard>
    <RadzenCard class="rz-mb-3">
        <RadzenRow AlignItems="AlignItems.End">
            <RadzenColumn Size="12" SizeSM="7">
                <RadzenFormField class="rz-w-100"
                    Text=@StringResource.GetStringByKey("SearchControl_SearchField_Label")>
                    <RadzenTextBox @bind-Value=@this.SearchText />
                </RadzenFormField>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenButton Icon="search" Text=@StringResource.GetStringByKey("SearchControl_SearchButton_Text")
                    ButtonStyle="ButtonStyle.Primary" Click=@this.ExecuteSearchAsync />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow class="rz-mt-3">
            <RadzenColumn>
                <FieldsetControl AllowCollapse="true" Collapsed="true"
                    Title=@StringResource.GetStringByKey("SearchControl_AdvancedFiltersButton_Text")>
                    <RadzenRow>
                        <RadzenColumn>
                            <RadzenFormField Text=@StringResource.GetStringByKey("SearchControl_TakeField_Label")>
                                <RadzenNumeric ShowUpDown="false" TValue="int?" @bind-Value=@this.Take />
                            </RadzenFormField>
                        </RadzenColumn>
                    </RadzenRow>
                    @FilterContent
                </FieldsetControl>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
    @this.ChildContent
</RadzenCard>

@code {
    [Parameter]
    public RenderFragment? FilterContent { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string SearchText { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> SearchTextChanged { get; set; }

    [Parameter]
    public int? Take { get; set; }

    [Parameter]
    public EventCallback<int?> TakeChanged { get; set; }

    [Parameter]
    public EventCallback OnExecuteSearch { get; set; }

    private async Task ExecuteSearchAsync()
    {
        if (this.OnExecuteSearch.HasDelegate)
        {
            await this.OnExecuteSearch.InvokeAsync();
        }
    }
}