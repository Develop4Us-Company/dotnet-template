@using AppProject.Models

@inherits AppProjectComponentBase

@typeparam TSummary where TSummary : ISummary

<FieldsetControl AllowCollapse=@this.AllowCollapse Collapsed=@this.Collapsed Title=@this.Title>
    <ChildContent>
        <RadzenRow AlignItems="AlignItems.End">
            <RadzenColumn>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="3" Wrap="FlexWrap.Wrap">
                    <RadzenButton ButtonStyle="ButtonStyle.Success" 
                        Icon=@(this.PreferAddOverNew ? "add_ad" : "add_circle")
                        Text=@StringResource.GetStringByKey(this.PreferAddOverNew ? "DataGridControl_AddButton_Text" : "DataGridControl_NewButton_Text")
                        Visible=@this.ShowNewAction
                        Click=@this.OnNewItem />
                    @this.GlobalActions
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenCard class="rz-mt-4 rz-p-1" Variant="Variant.Outlined">
            <RadzenRow AlignItems="AlignItems.End">
                <RadzenColumn>
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="3" Wrap="FlexWrap.Wrap">
                        <RadzenButton ButtonStyle="ButtonStyle.Base" Variant="Variant.Outlined" 
                            Icon=@(this.PreferOpenOverEdit ? "arrow_right_alt" : "edit")
                            Text=@StringResource.GetStringByKey(this.PreferAddOverNew ? "DataGridControl_OpenButton_Text" : "DataGridControl_EditButton_Text")
                            Visible=@this.ShowEditAction
                            Disabled=@(!this.IsSingleItemSelected)
                            Click=@this.OnEditItem />
                        @this.ContextActions
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Outlined" 
                            Icon="delete"
                            Text=@StringResource.GetStringByKey("DataGridControl_DeleteButton_Text")
                            Visible=@this.ShowEditAction
                            Disabled=@(!this.HasItemsSelected)
                            Click=@this.OnDeleteItem />
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow class="rz-mt-1">
                <RadzenColumn>
                    <RadzenDataGrid TItem="TSummary" @ref=@this.dataGrid Data=@Items
                        AllowRowSelectOnRowClick="true" SelectionMode="DataGridSelectionMode.Multiple"
                        Value=@this.SelectedItems ValueChanged=@OnSelectedItemsChangedAsync
                        AllowColumnReorder="true" AllowMultiColumnSorting="true"
                        AllowAlternatingRows="true" AllowFiltering="true" AllowSorting="true" AllowColumnResize="true"
                        AllowGrouping="true">
                        <Columns>
                            <RadzenDataGridColumn Width="60px" Sortable="false" Filterable="false">
                                <HeaderTemplate>
                                    <RadzenCheckBox TValue="bool?" TabIndex="-1" TriState="false"
                                        Value=@this.AreAllItemsSelected
                                        Change=@this.SetAllItemsSelectionAsync />
                                </HeaderTemplate>
                                <Template Context="data">
                                    <RadzenCheckBox TValue="bool" TabIndex="-1" TriState="false"
                                        Value=@(this.SelectedItems != null && this.SelectedItems.Contains(data)) />
                                </Template>
                            </RadzenDataGridColumn>
                            @this.ChildContent
                        </Columns>
                    </RadzenDataGrid>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </ChildContent>
</FieldsetControl>

@code {
    private RadzenDataGrid<TSummary> dataGrid = default!;

    [Parameter]
    public bool AllowCollapse { get; set; }

    [Parameter]
    public bool Collapsed { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public bool ShowNewAction { get; set; } = true;

    [Parameter]
    public bool ShowEditAction { get; set; } = true;

    [Parameter]
    public bool ShowDeleteAction { get; set; } = true;

    [Parameter]
    public bool PreferAddOverNew { get; set; }

    [Parameter]
    public bool PreferOpenOverEdit { get; set; }

    [Parameter]
    public RenderFragment? GlobalActions { get; set; }

    [Parameter]
    public RenderFragment? ContextActions { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public IList<TSummary> Items { get; set; } = new List<TSummary>();

    [Parameter]
    public IList<TSummary> SelectedItems { get; set; } = new List<TSummary>();

    [Parameter]
    public EventCallback<IList<TSummary>> SelectedItemsChanged { get; set; }

    [Parameter]
    public EventCallback OnNewItem { get; set; }

    [Parameter]
    public EventCallback OnEditItem { get; set; }

    [Parameter]
    public EventCallback OnDeleteItem { get; set; }

    private bool IsSingleItemSelected => this.SelectedItems.Count() == 1;

    private bool HasItemsSelected => this.SelectedItems.Any();

    private bool? AreAllItemsSelected
    {
        get
        {
            if (this.SelectedItems == null || !this.SelectedItems.Any())
            {
                return false;
            }

            if (!this.Items.All(item => this.SelectedItems.Contains(item)))
            {
                return null;
            }

            return true;
        }
    }

    private async Task SetAllItemsSelectionAsync(bool? isSelected)
    {
        await this.OnSelectedItemsChangedAsync(isSelected == true ? this.Items : new List<TSummary>());

        this.StateHasChanged();
    }

    private async Task OnSelectedItemsChangedAsync(IList<TSummary> selectedItems)
    {
        this.SelectedItems = selectedItems;

        if (this.SelectedItemsChanged.HasDelegate)
        {
            await this.SelectedItemsChanged.InvokeAsync(selectedItems);
        }
    }
}
