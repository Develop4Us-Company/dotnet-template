@using AppProject.Models

@inherits AppProjectComponentBase

@typeparam TItem

<FieldsetControl AllowCollapse=@this.AllowCollapse Collapsed=@this.Collapsed Title=@this.Title>
    <RadzenRow AlignItems="AlignItems.End">
        <RadzenColumn>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="3" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.Right">
                <RadzenButton ButtonStyle="ButtonStyle.Success" 
                    Icon=@(this.PreferAddOverNew ? "add_ad" : "add_circle")
                    Text=@StringResource.GetStringByKey(this.PreferAddOverNew ? "DataGridControl_AddButton_Text" : "DataGridControl_NewButton_Text")
                    Visible=@this.ShowNewAction
                    Click=@this.OnNewItem />
                @this.GlobalActions
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenCard class="rz-mt-4 rz-p-1" Variant="Variant.Outlined">
        <RadzenRow AlignItems="AlignItems.End">
            <RadzenColumn>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="3" Wrap="FlexWrap.Wrap" JustifyContent="JustifyContent.Right">
                    <RadzenButton ButtonStyle="ButtonStyle.Base" Variant="Variant.Outlined" 
                        Icon=@(this.PreferOpenOverEdit ? "arrow_right_alt" : "edit")
                        Text=@StringResource.GetStringByKey(this.PreferAddOverNew ? "DataGridControl_OpenButton_Text" : "DataGridControl_EditButton_Text")
                        Visible=@this.ShowEditAction
                        Disabled=@(!this.IsSingleItemSelected)
                        Click=@this.OnEditItem />
                    @this.ContextActions
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Outlined" 
                        Icon="delete"
                        Text=@StringResource.GetStringByKey("DataGridControl_DeleteButton_Text")
                        Visible=@this.ShowEditAction
                        Disabled=@(!this.HasItemsSelected)
                        Click=@this.OnDeleteItem />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow class="rz-mt-1">
            <RadzenColumn>
                <RadzenDataGrid TItem="TItem" @ref=@this.dataGrid Data=@Items
                    GroupPanelText=@StringResource.GetStringByKey("RadzenDataGrid_GroupPanel_Text")
                    PageSizeText=@StringResource.GetStringByKey("RadzenDataGrid_PageSize_Text")
                    EmptyText=@StringResource.GetStringByKey("RadzenDataGrid_Empty_Text")
                    FilterText=@StringResource.GetStringByKey("RadzenDataGrid_Filter_Text")
                    EqualsText=@StringResource.GetStringByKey("RadzenDataGrid_Equals_Text")
                    NotEqualsText=@StringResource.GetStringByKey("RadzenDataGrid_NotEquals_Text")
                    ContainsText=@StringResource.GetStringByKey("RadzenDataGrid_Contains_Text")
                    StartsWithText=@StringResource.GetStringByKey("RadzenDataGrid_StartsWith_Text")
                    EndsWithText=@StringResource.GetStringByKey("RadzenDataGrid_EndsWith_Text")
                    DoesNotContainText=@StringResource.GetStringByKey("RadzenDataGrid_DoesNotContain_Text")
                    IsNullText=@StringResource.GetStringByKey("RadzenDataGrid_IsNull_Text")
                    IsEmptyText=@StringResource.GetStringByKey("RadzenDataGrid_IsEmpty_Text")
                    IsNotNullText=@StringResource.GetStringByKey("RadzenDataGrid_IsNotNull_Text")
                    IsNotEmptyText=@StringResource.GetStringByKey("RadzenDataGrid_IsNotEmpty_Text")
                    ClearFilterText=@StringResource.GetStringByKey("RadzenDataGrid_ClearFilter_Text")
                    ApplyFilterText=@StringResource.GetStringByKey("RadzenDataGrid_ApplyFilter_Text")
                    AndOperatorText=@StringResource.GetStringByKey("RadzenDataGrid_AndOperator_Text")
                    OrOperatorText=@StringResource.GetStringByKey("RadzenDataGrid_OrOperator_Text")
                    NextPageTitle=@StringResource.GetStringByKey("RadzenDataGrid_NextPage_Title")
                    LastPageTitle=@StringResource.GetStringByKey("RadzenDataGrid_LastPage_Title")
                    PrevPageTitle=@StringResource.GetStringByKey("RadzenDataGrid_PreviousPage_Title")
                    FirstPageTitle=@StringResource.GetStringByKey("RadzenDataGrid_FirstPage_Title")
                    PageTitleFormat=@StringResource.GetStringByKey("RadzenDataGrid_Page_TitleFormat")
                    AllowRowSelectOnRowClick="true" SelectionMode="DataGridSelectionMode.Multiple"
                    Value=@this.SelectedItems ValueChanged=@OnSelectedItemsChangedAsync
                    AllowPaging="true" PageSizeOptions=@this.PageSizeOptions
                    AllowColumnReorder="true" AllowMultiColumnSorting="true"
                    AllowAlternatingRows="true" AllowFiltering="true" AllowSorting="true" AllowColumnResize="true"
                    AllowGrouping="true">
                    <Columns>
                        <RadzenDataGridColumn Width="60px" Sortable="false" Filterable="false">
                            <HeaderTemplate>
                                <RadzenCheckBox TValue="bool?" TabIndex="-1" TriState="false"
                                    Value=@this.AreAllItemsSelected
                                    Change=@this.SetAllItemsSelectionAsync />
                            </HeaderTemplate>
                            <Template Context="data">
                                <RadzenCheckBox TValue="bool" TabIndex="-1" TriState="false"
                                    Value=@(this.SelectedItems != null && this.SelectedItems.Contains(data)) />
                            </Template>
                        </RadzenDataGridColumn>
                        @this.ChildContent
                    </Columns>
                </RadzenDataGrid>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
</FieldsetControl>

@code {
    private RadzenDataGrid<TItem> dataGrid = default!;
    
    [Parameter]
    public bool AllowCollapse { get; set; }

    [Parameter]
    public bool Collapsed { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public bool ShowNewAction { get; set; } = true;

    [Parameter]
    public bool ShowEditAction { get; set; } = true;

    [Parameter]
    public bool ShowDeleteAction { get; set; } = true;

    [Parameter]
    public bool PreferAddOverNew { get; set; }

    [Parameter]
    public bool PreferOpenOverEdit { get; set; }

    [Parameter]
    public RenderFragment? GlobalActions { get; set; }

    [Parameter]
    public RenderFragment? ContextActions { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public IList<TItem> Items { get; set; } = new List<TItem>();

    [Parameter]
    public IList<TItem> SelectedItems { get; set; } = new List<TItem>();

    [Parameter]
    public EventCallback<IList<TItem>> SelectedItemsChanged { get; set; }

    [Parameter]
    public EventCallback OnNewItem { get; set; }

    [Parameter]
    public EventCallback OnEditItem { get; set; }

    [Parameter]
    public EventCallback OnDeleteItem { get; set; }

    private IEnumerable<int> PageSizeOptions => new int[] { 10, 20, 50, 100, 1000 };

    private bool IsSingleItemSelected => this.SelectedItems.Count() == 1;

    private bool HasItemsSelected => this.SelectedItems.Any();

    private bool? AreAllItemsSelected
    {
        get
        {
            if (this.SelectedItems == null || !this.SelectedItems.Any())
            {
                return false;
            }

            if (!this.Items.All(item => this.SelectedItems.Contains(item)))
            {
                return null;
            }

            return true;
        }
    }

    private async Task SetAllItemsSelectionAsync(bool? isSelected)
    {
        await this.OnSelectedItemsChangedAsync(isSelected == true ? this.Items : new List<TItem>());

        this.StateHasChanged();
    }

    private async Task OnSelectedItemsChangedAsync(IList<TItem> value)
    {
        if (this.SelectedItems != value)
        {
            this.SelectedItems = value;

            if (this.SelectedItemsChanged.HasDelegate)
            {
                await this.SelectedItemsChanged.InvokeAsync(value);
            }
        }
    }
}
