@using AppProject.Models.Auth
@using AppProject.Resources
@using AppProject.Web.ApiClient.Auth
@using System.Threading.Tasks

<RadzenPanelMenu>
    <RadzenPanelMenuItem Text=@StringResource.GetStringByKey("Menu_Home") Icon="home" Path="/" />
    <AuthorizeView>
        <Authorized>

            @if(permissions?.Contains(PermissionType.System_ManageSettings) == true)
            {
                <RadzenPanelMenuItem Text=@StringResource.GetStringByKey("Menu_Countries") Icon="globe" />
                <RadzenPanelMenuItem Text=@StringResource.GetStringByKey("Menu_States") Icon="globe_location_pin" />
                <RadzenPanelMenuItem Text=@StringResource.GetStringByKey("Menu_Cities") Icon="location_city" />
            }

        </Authorized>
    </AuthorizeView>
</RadzenPanelMenu>

@code {
    private IEnumerable<PermissionType> permissions = Enumerable.Empty<PermissionType>();

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    [Inject]
    private IPermissionClient PermissionClient { get; set; }

    public void Dispose()
    {
        this.AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        this.AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await this.LoadPermissionsAsync(null);
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        _ = LoadPermissionsAsync(task);
    }

    private async Task LoadPermissionsAsync(Task<AuthenticationState> task)
    {
        permissions = Enumerable.Empty<PermissionType>();

        var authState = task != null ? await task : await this.AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            permissions = await PermissionClient.GetCurrentUserPermissionsAsync();
        }

        StateHasChanged();
    }
}
