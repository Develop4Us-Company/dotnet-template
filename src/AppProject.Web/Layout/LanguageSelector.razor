@using AppProject.Web.Constants
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components
@using Radzen
@using Radzen.Blazor.Rendering
@using System.Globalization

@inherits AppProjectComponentBase

<style type="text/css">
    .language-popup {
        display: none;
        position: absolute;
        overflow: hidden;
        border: var(--rz-panel-border);
        background-color: var(--rz-panel-background-color);
        box-shadow: var(--rz-panel-shadow);
        border-radius: var(--rz-border-radius)
    }
</style>

<RadzenButton @ref="button" Icon="language" ButtonStyle="ButtonStyle.Base"
    Click="@ToggleLanguagePopupAsync" />

<Popup @ref=popup Lazy=true class="language-popup">
    <RadzenDropDown TValue="CultureInfo" @bind-Value=Culture Change=@OnLanguageChangedAsync Data=@SupportedCultures
        TextProperty="DisplayName" />
</Popup>

@code {
    private RadzenButton? button;
    private Popup? popup;

    private CultureInfo[] SupportedCultures => new[]
    {
        new CultureInfo("en-US"),
        new CultureInfo("pt-BR"),
        new CultureInfo("es-ES"),
    };

    [Inject]
    private ILocalStorageService LocalStorageService { get; set; } = default!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    private CultureInfo Culture { get; set; } = CultureInfo.CurrentCulture;

    private async Task OnLanguageChangedAsync(object? value)
    {
        var culture = value is CultureInfo selectedCulture
            ? selectedCulture
            : new CultureInfo(AppProjectConstants.DefaultLanguage);

        await LocalStorageService.SetItemAsync(AppProjectConstants.LanguageLocalStorageKey, culture.Name);

        CultureInfo.DefaultThreadCurrentCulture = culture;
        CultureInfo.DefaultThreadCurrentUICulture = culture;

        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task ToggleLanguagePopupAsync()
    {
        if (popup is null || button is null)
        {
            return;
        }

        await popup.ToggleAsync(button.Element);
    }
}
