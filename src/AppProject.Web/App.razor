@using AppProject.Resources
@using AppProject.Web.Constants
@using Blazored.LocalStorage
@using System.Globalization

<RadzenTheme Theme="@ThemeConstants.DefaultLightTheme" @rendermode="RenderMode.InteractiveAuto" />

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>@StringResource.GetStringByKey("NotFound_Title")</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <RadzenText TextStyle="TextStyle.DisplayH3" Text=@StringResource.GetStringByKey("NotFound_Message") />
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    [Inject]
    private ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    private ThemeService ThemeService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await SetThemeAsync();
    }

    private async Task SetThemeAsync()
    {
        var theme =
        await this.LocalStorageService.GetItemAsync<string>(ThemeConstants.ThemeLocalStorageKey)
        ?? ThemeConstants.DefaultLightTheme;

        ThemeService.SetTheme(theme);
    }
}