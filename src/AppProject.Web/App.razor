@using AppProject.Web.Constants
@using Blazored.LocalStorage
@using System.Globalization
@using System.Reflection
@using Microsoft.AspNetCore.Components.WebAssembly.Services

<RadzenTheme Theme="@ThemeConstants.DefaultLightTheme" @rendermode="RenderMode.InteractiveAuto" />

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="OnNavigateAsync" AdditionalAssemblies="lazyAssemblies">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>@StringResource.GetStringByKey("NotFound_Title")</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <RadzenText TextStyle="TextStyle.DisplayH3" Text=@StringResource.GetStringByKey("NotFound_Message") />
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    private List<Assembly> lazyAssemblies = new();

    [Inject]
    private ILocalStorageService LocalStorageService { get; set; } = default!;

    [Inject]
    private ThemeService ThemeService { get; set; } = default!;

    [Inject]
    private LazyAssemblyLoader AssemblyLoader { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await SetThemeAsync();
    }

    private async Task SetThemeAsync()
    {
        var theme = await this.LocalStorageService.GetItemAsync<string>(ThemeConstants.ThemeLocalStorageKey)
        ?? ThemeConstants.DefaultLightTheme;

        ThemeService.SetTheme(theme);
    }

    private async Task OnNavigateAsync(NavigationContext args)
    {
        if (args.Path.StartsWith("general", StringComparison.OrdinalIgnoreCase))
        {
            if (!lazyAssemblies.Any(a => a.GetName().Name == "AppProject.Web.General"))
            {
                var assemblies = await AssemblyLoader.LoadAssembliesAsync(
                    new[] { "AppProject.Web.General.dll" });
                lazyAssemblies.AddRange(assemblies);
            }
        }
    }
}